version: '3'
services:
  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    image: 'zookeeper:3.8.2'
    ports:
      - '2181:2181'
    environment:
        ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - my-network
  kafka:
    image: 'bitnami/kafka:3.5.1'
    container_name: kafka
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_MAX_REQUEST_SIZE: 20971520
      KAFKA_CFG_MAX_REQUEST_SIZE: 20971520
      KAFKA_CFG_PRODUCER_MAX_REQUEST_SIZE: 20971520
    networks:
      - my-network
  eureka:
    container_name: eureka
    build:
      context: .
      dockerfile: ./eureka_server/Dockerfile
    ports:
      - "8761:8761"
    networks:
      - my-network
  db:
    container_name: postgres
    image: postgres:15.4
    restart: always
    environment:
      POSTGRES_PASSWORD: oad
      POSTGRES_USER: oad
      POSTGRES_DB: once_a_day
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - my-network
  file_storage:
    container_name: file_storage
    build:
      context: .
      dockerfile: ./file_storage/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: local
    ports:
      - "8088:8088"
      - "5088:5088"
    volumes:
      - files:/tmp/activity
      - profiles:/tmp/profile
      - audios:/tmp/audio
    depends_on:
      - db
      - kafka
      - eureka
    networks:
      - my-network
  splitter:
    container_name: splitter
#    build:
#      context: D:\Studia\seba\Silence-Splitter\
#      dockerfile: D:\Studia\seba\Silence-Splitter\Dockerfile
    image: eselff/silence-splitter:v7
    ports:
      - "8092:5000"
    networks:
      - my-network
  core:
    container_name: core
    build:
      context: .
      dockerfile: ./core/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: local
    ports:
      - "8086:8086"
      - "5087:5086"
    depends_on:
      - db
      - kafka
      - eureka
    networks:
      - my-network
  sso:
    container_name: sso
    build:
      context: .
      dockerfile: ./sso/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: local
    ports:
      - "8083:8083"
      - "5083:5083"
    depends_on:
      - db
      - kafka
      - eureka
    networks:
      - my-network
  messenger:
    container_name: messenger
    build:
      context: .
      dockerfile: ./messenger/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: local
    ports:
      - "8091:8091"
      - "5091:5091"
    depends_on:
      - db
      - kafka
      - eureka
    networks:
      - my-network
  api_gateway:
    build:
      context: .
      dockerfile: ./gateway/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: local
    ports:
      - "8081:8081"
    depends_on:
      - db
      - kafka
      - eureka
    networks:
      - my-network
  keycloak:
    container_name: keycloak
    build:
      context: ../IDP
      dockerfile: ./SPI/Dockerfile
    volumes:
      - /tmp/export:/tmp/export
    ports:
      - "8080:8080"
    depends_on:
      - db
      - kafka
      - eureka
    networks:
      - my-network
  engine:
    container_name: engine
    build:
      context: ../python
      dockerfile: ./Dockerfile
    ports:
      - "8079:8079"
    depends_on:
      - db
      - kafka
      - eureka
    networks:
      - my-network
  keycloak-sidecar:
    container_name: keycloak-sidecar
    build:
      context: ../IDP
      dockerfile: ./idp_sidecar/Dockerfile
    ports:
      - "8084:8084"
    depends_on:
      - db
      - kafka
      - eureka
    networks:
      - my-network
  liquibase:
    build:
      context: .
      dockerfile: ./database/Dockerfile
    depends_on:
      - db
    networks:
      - my-network
#  localstack:
#    container_name: localstack
#    image: localstack/localstack:2.2
#    ports:
#      - "127.0.0.1:4566:4566"            # LocalStack Gateway
#      - "127.0.0.1:4510-4559:4510-4559"  # external services port range
#    environment:
#      - DEBUG=${DEBUG-}
#      - DOCKER_HOST=unix:///var/run/docker.sock
#      - AWS_ACCESS_KEY=test
#      - AWS_SECRET_KEY=test
#    volumes:
#      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
#      - ./aws:/etc/localstack/init/ready.d
#    networks:
#      - my-network
#  httpbin:
#    image: kennethreitz/httpbin:latest
#    ports:
#      - "80:80"
volumes:
    db_data:
    files:
    profiles:
    audios:
networks:
  my-network:
    driver: bridge